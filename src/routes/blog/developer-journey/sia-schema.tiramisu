title { To the next level: A Developer's Guide to Sia Schema }

Now we are going to talk about the bold { high-level API } of Sia.

image {
    src = /images/blog/dev-journey/sia-next-level.png,
    alt = Sonic saying welcome to the next level,
    caption = ""Sia the "Sonic", get it?""
}

We know from a previous link { article, to =
/blog/developer-journey/sia-the-sonic } about the low-level API of Sia that in
order to serialize and deserialize your data, you have to add your fields by
their type and length, and deserialize them in the same order.

code {
    language = typescript,
    content = """
    const payload = sia
        .addAscii(person.name ?? '')
        .addUInt8(person.age ?? 0)
        .toUint8ArrayReference();

    const desia = new Sia(payload);
    const deserialized: Person = {
        name: desia.readAscii(),
        age: desia.readUInt8()
    };
    """
}

While that was simple, the high-level API is even better!

title { Sia Compiler, size = 2 }

If you've ever used tools like inlineCode { protoc }, inlineCode { sqlc } or
inlineCode { prisma } this concept will feel familiar. These tools let you
define your data in a single schema file, and in return, they generate all the
necessary code for you. The Sia compiler does the same thing for serialization.

Sia compiler requires a schema file with inlineCode { .sia } file extension and
uses the inlineCode { @timeleap/sia-schema } package.

Install:

code {
    language = sh,
    content = """
    npm install -g @timeleap/sia-schema
    """
}

Or you can use inlineCode { npx }:

code {
    language = sh,
    content = """
    npx @timeleap/sia-schema compile sample.sia
    """
}

Add the inlineCode { --help } flag to see the available options.

code {
    language = sh,
    content = """
    Commands:
    ir [options] <file>       Compile a .sia file to intermediate representation
    compile [options] <file>  Compile a .sia file
    help [command]            display help for command
    """
}

For example, let's look at a schema like this:

