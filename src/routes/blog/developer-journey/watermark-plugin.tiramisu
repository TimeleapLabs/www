title { Watermark Plugin }

My goal as the new DevRel engineer is to learn and build in public, creating
useful examples along the way. That's why my next project is to build an image
watermarking plugin.

This project is a perfect choice for a few reasons:

list {
    items = bold { Working with Files }: 
    I want to learn how to handle different data types specifically image files
    in Sia.,
    items = bold { A Useful Function }:
    Watermarking is a genuinely useful function that anyone from small
    businesses to individual creators can use. A good real use case example for
    a plugin.,
    items = "This plugin perfectly demonstrates the purpose of Timeleap's
    distributed network. You can create a powerful plugin, add it to a subnet,
    and set a fee for its usage. Other developers can then tap into the
    network's computation power to use your function for their own needs,
    turning your code into a monetized application."
}

In this article, I'll take you through my journey of building this plugin, from
my initial learning to the final implementation.

title { My Journey: A Learning Log, size = 2 }

list {
    items = bold { Understanding the Core Task }: 
    "Before I write any code, I need to
    understand how image watermarking works. I'm going to use Sharp js and make
    the texts into SVG and then watermark it.",
    items = bold { Schema Definition }:
    "The first piece of code I'll write is the Sia schema for the plugin. This
    is the contract that defines what the plugin does. It will need to accept
    the image data and the watermark text as arguments and return the
    watermarked image file. I'll share my draft schema here and explain why I
    chose each data type."
}

code {
    language = sia,
    content = """
    schema Args {
        text   string8(encoding = "ascii")
        location string8(encoding = "ascii")
        image byte32
    }

    schema Fee {
        amount     uint64
        currency   string8(encoding = "ascii")
    }

    schema WatermarkImageCall {
        uuid    byte8
        plugin  string8(encoding = "ascii")
        method  string8(encoding = "ascii")
        timeout uint64
        fee     Fee
        args    Args
    }

    schema WatermarkImageResponse {
        opcode    uint8
        appId     uint64
        uuid      byte8
        error?    uint16
        ok?       bool
        watermarkedImage?  byte32
    }


    plugin swiss.timeleap.watermarker as WatermarkImage {
        method addWatermarkToImage(timeout = 5000, fee = 1, currency = "USD") Args returns {
            ok bool
            watermarkedImage byte32
        }
    }
"""
}

Similar to link { to = /blog/developer-journey/hello-world-timeleap-app,
hello-world }, we need args, fee, call, and response. We define what we expect
to receive, the text of the watermark, the image, and the location that the user
wants to watermark to be set on. Then we just add these args and fees to the
call, I'm thinking we can later on add this to tlp CLI. The default schema for a
plugin should contain inlineCode { args, fee, call, response }. We will get to
the tlp CLI later in the article.

title { Building the Plugin, size = 3 }

This is where the core logic will go. I'll implement the
inlineCode { addWaterMarkToImage } function that takes the input image and text,
applies the watermark using my chosen library, and returns the result.