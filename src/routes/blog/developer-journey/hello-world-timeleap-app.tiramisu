title { Hello World: introduction to Timeleap Apps }

alert { type = info, This article assumes some familiarity with: Sia, Sia
Schema, and the Timeleap protocol. }

In this article, we'll walk through a simple inlineCode { hello-world } Timeleap
app to visually demonstrate the concepts we've discussed. The full code for this
example is available on link { to =
https://github.com/TimeleapLabs/plugins/hello-world, Github }.

Our app uses Timeleap tools for its internal communication. For the user, it's a
straightforward command-line application: you input a text string, and it
returns the same string. The magic happens behind the scenes, with four key
components working together in a containerized Docker environment: a bold {
plugin }, a bold { broker }, a bold { worker }, a bold { client } and a small
bold { CLI app }.

Let's begin with the starting point: the Client.

title { The Client: Making the Connection, size = 2 }

The CLI app takes your input and sends it to the client. The client's main job
is to call a specific function inside the plugin. Before it can do that, it must
first establish a secure connection.

Here is the function that handles this connection:

code { 
    language = typescript,
    content =  """
	import { Client, Wallet } from '@timeleap/client';
	import { HelloWorld } from '@repo/models';
	import { Sia } from '@timeleap/sia';

	const createClient = async () => {
		const wallet = await Wallet.random();
		const client = await Client.connect(wallet, {
			uri: process.env.BROKER_URI,
			publicKey: process.env.BROKER_PUBLIC_KEY
		});
		const hello = HelloWorld.connect(client);

		return { client, hello };
	};
"""
}

This simple function sets up the entire foundation for our app's communication.
It:

list {
    type = ordered,
    items = bold { Creates a } inlineCode { Wallet }: 
    This generates a inlineCode { Wallet } instance which is our client's
    cryptographic identity on the network.,
    items = bold { Connects to the } inlineCode { Broker }: 
    It then uses that identity to securely connect to the broker which acts as
    the central orchestrator for our network.,
    items = bold { Connects to the Plugin }:
    Finally it connects to the inlineCode { HelloWorld } plugin making its
    functions available to our client.
}

title { The Sia Schema: The Blueprint of Communication, size = 3 }

This is the most important part of the process. The entire communication between
the client and the worker is defined and enforced by a Sia Schema. This schema
acts as a contract, ensuring that all data sent and received is in the correct
format. The plugin's functions themselves can be generated directly from this
schema, which we explained link { to = /blog/developer-journey/sia-schema, here
}.

Here is the schema for our inlineCode { hello-world } app:
