title { From Confusion to Clarity: Timeleap Plugins }

pullQuote {
  author = Steve Jobs,
  Simple can be harder than complex: You have to work hard to get your thinking clean to make it simple.
}

I remember the first time I came across the Timeleap network. it immediately struck me as a cool and promising project. I thought, "This could be something big... I just wish it were easier to get started."

Back then, the idea of some kind of wizard or streamlined setup felt like wishful thinking. But as time passed and I started working on a plugin myself, that early thought came full circle. We realized it wasn’t just a nice-to-have; it was a genuine need.

That’s what led to this repo: a focused, developer-friendly space for writing and testing Timeleap plugins without needing to understand the entire system. It's built from real experience, and it's here to help others get moving faster.

title { 1. Why This Repo Exists, size = 2 }

The goal of this monorepo is to make plugin development for Timeleap as approachable as possible. It removes the burden of understanding network internals by providing a Docker-based setup that handles the infrastructure for you.
Included is a working inlineCode {Hello World} plugin, showcasing:

list {
  items = "How to register a plugin",
  items = "How to expose a function `hi`",
  items = "How to connect and interact with the network from a client"
}

image { src = "/images/blog/timeleap-plugins.png", alt = "How the Timeleap plugin 'hello-world' works" }

title { 2. What’s Inside the Repo, size = 2 }

To truly understand what's inside this repo, take a look at the diagram. Everything you see is enclosed within a blue circle. This represents the isolated Docker environment where the full Timeleap setup runs. As a developer, you don't need to worry about the internals; you interact only with the CLI from the outside.

Once you run the CLI, it sends a request. That request enters the containerized world and is picked up by the client server, which is responsible for forwarding it. But as the red cross in the diagram clearly shows, it doesn’t talk to the plugin directly.

Instead, the request is passed into a green box labeled as a “Timeleap Broker,” and that’s intentional. This green box represents an external submodule, which is the actual Timeleap codebase, added as a Git submodule. It has its own Dockerfile, and when you spin it up, it launches two key components: the broker and the worker.

Here’s the magic: you don’t need to modify or understand this codebase. All you provide is the "power crystal" — a set of secrets and configuration values inside the main monorepo. That’s your recipe. The system takes care of the rest and launches a full Timeleap stack with your plugin ready to go.

Here’s what happens behind the scenes:

list {
  items = "The broker receives the client request and determines which worker is responsible for the plugin the client wants to call.",
  items = "The worker then invokes your plugin’s function.",
  items = "The plugin responds, and the response flows back through the broker, then the client, and finally reaches you via the CLI."
}

There’s also a grey note shown in the diagram. This is the shared linter configuration, placed in a separate package inside the monorepo. It uses link {bun, to = <link to bun>} and can be referenced in both the client and plugin packages to ensure consistent linting rules across this codebase.

title { 3. How to Use It, size = 2 }

pullQuote {
  Clone it. Run it. Learn by tweaking., author = Hamed
}

Clone the link {repo, to = https://github.com/TimeleapLabs/plugins}

Go inside the `hello-world` directory and run inlineCode {cd hello-world} and inlineCode {bun install}

Follow the README to add configuration and secrets to config

Run inlineCode {docker-compose up}

Use the CLI to call the plugin and see how it works

Modify the plugin logic to fit your needs

You don’t need to modify anything in the Timeleap Network itself. The infrastructure is handled for you.

title { 4. Who This Is For, size = 2 }

Developers building custom plugins or services for Timeleap and anyone who wants a working example to learn from.

title { 5. Next Steps, size = 2 }

As a Developer Relations engineer at Timeleap, my goal is to guide more developers into building with the network, not just through docs, but by sharing real examples, improving onboarding, and building in public.

This repo is just the beginning. It’s the foundation for a smoother plugin experience, and it will continue to grow with more plugins, guides, and best practices.

meta {
  description = "Developing on Timeleap is easier than ever.",
  ogImageText = [Timeleap, Plugins Repo Guide],
  ogImageFontSize = 28,
  author = hamed,
  createdAt = 2025-07-30
}
