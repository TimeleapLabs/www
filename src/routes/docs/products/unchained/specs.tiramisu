title { Specs }

At the core of Unchained there are two main concepts: Datagrams and Functions.
This section will explain what they are and how they work.

title { Datagrams, size = 2 }

A Datagram is a piece of data that is sent from one computer to another. It is
the basic unit of communication in Unchained. Datagrams can be of any size and
can contain any type of data. However, there is still a structure to how they're
made.

Datagrams must be send by an authenticated user. The user must first send a
HELLO message to the network to authenticate. The HELLO message contains the
user's name, EVM address, public key, and short public key. The user is then
challenged by the network to prove that they have the private key that
corresponds to the public key. The user must then fulfill the challenge by
sending a KOSK message to the network. The KOSK message contains the challenge
and a signature of the challenge:

mermaid {
  """
  erDiagram
    HELLO {
        Uint8        OpCode
        String8      Name
        String8      EvmAddress
        ByteArray8   PublicKey
        ByteArray8   ShortPublicKey
    }

    CHALLENGE {
        Uint8        OpCode
        Bool         Accepted
        ByteArray8   Challenge
        ByteArray8   Signature
    }

    KOSK {
        Uint8        OpCode
        Bool         Accepted
        ByteArray8   Challenge
        ByteArray8   Signature
    }

    USER ||--|| HELLO : "sends a hello message"
    USER ||--|| CHALLENGE : "then accepts the challenge"
    USER ||--|| KOSK : "finally fulfills the challenge"
  """
}

After authentication, the user can send Datagrams to the network. The below
chart shows how a Datagram is structured:

mermaid {
  """
  erDiagram
    DATAGRAM {
        Uint8        OpCode
        Uint64       Timestamp
        ByteArray8   Hash
        ByteArray8   Topic
        ByteArray32  Metadata
        ByteArray8   Signature
    }

    USER ||--|| AUTH : "authenticates first"
    USER ||--o{ DATAGRAM : "then sends"
  """
}

All packets must be signed by the user who sends them. The signature is the Sia
binary representation of the packet's contents, signed by the user's BLS12-381
private key. The signature is then verified by the recipient using the user's
public key. The following DST should be used for the signature:

code {
  language = typescript,
  content = """
    const DST = "Unchained";"""
}

alert {
  title = Serialization,
  type = info,
  
  All communication between Unchained nodes, users, plugins, clients, and
  services is done using the Sia serialization format. Learn more about it
  link { to = /docs/products/sia, here }.
}

Users can subscribe to topics to receive Datagrams. The below chart shows how
users can subscribe to topics:

mermaid {
  """
  erDiagram
    DATAGRAM_BROADCAST {
        Uint8        OpCode
        Uint64       Timestamp
        ByteArray8   Hash
        ByteArray8   Topic
        ByteArray32  Metadata
        ByteArray8   Signature
        String8      SignerName
        String8      SignerEvmAddress
        ByteArray8   SignerPublicKey
        ByteArray8   SignerShortPublicKey
    }

    SUBSCRIBE {
        Uint8        OpCode
        String8      Topic
        ByteArray8   Signature
    }

    USER ||--|| AUTH : "authenticates first"
    USER ||--|| SUBSCRIBE : "then subscribes to a topic"
    USER ||--o{ DATAGRAM_BROADCAST : "finally receives datagrams"
  """
}

title { Functions, size = 2 }

A Function is a piece of code that is executed on a computer. It is the basic
unit of computation in Unchained. Functions can be of any size and can contain
any type of code. Functions are added to the network by users, through worker
plugins.

Workers need to register the Functions they can execute. Workers need to
authenticate with the network before they can register Functions. The below
chart shows how the registeration process works:

mermaid {
  """
  erDiagram
    FUNCTION {
        Uint8        OpCode
        String8      FunctionName
        ByteArray8   Signature
    }

    USER ||--|| AUTH : "authenticates first"
    USER ||--o{ FUNCTION : "then registers"
  """
}

Once a Function is registered, it can be executed by any user on the network.
To run a Function, a user sends an Execution request to the network. The below
chart shows how the execution process works:

mermaid {
  """
  erDiagram
    EXECUTION {
        Uint8        OpCode
        ByteArray8   UUID
        ByteArray8   Signature
        String8      FunctionName
        Uint64       Timeout
        Dynamic      Parameters
    }

    RESULT {
        Uint8        OpCode
        ByteArray8   UUID
        Uint64       Error
        Dynamic      Output
        ByteArray8   Signature
    }

    USER ||--|| AUTH : "authenticates first"
    USER ||--o{ EXECUTION : "then executes a function"
    USER ||--o{ RESULT : "finally receives the result"
  """
}

meta {
  description = "Datagrams and Functions are the core concepts of Unchained. Datagrams are
                the basic unit of communication, and Functions are the basic unit
                of computation.",
  title = Unchained Specs
}