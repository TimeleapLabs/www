title { Local Devnet }

To try out the new features of Unchained, or to test your applications, you can
run a local development network. This network is a simulation of the real network,
but it runs on your local machine. This allows you to test your applications in a
controlled environment.

alert { type = warning, title = "Work in Progress", This guide is a work in
progress and may not cover all aspects of running a local devnet. }

title { Installation, size = 2 }

To run a local devnet, you need to install the Unchained CLI. You can install
the CLI from GitHub releases. Download the latest release for your operating
system and architecture link { here, to =
https://github.com/TimeleapLabs/unchained/releases }. Once you have downloaded
the binary, you can move it to a directory in your PATH. You can also rename the
binary to inlineCode { unchained }.

alert { type = info, title = "Minimum Required Version", This guide requires
the Unchained CLI version v0.14.0-alpha.1 or later. } 

title { Configuration, size = 2 }

To run a local devnet, you need to configure the network. The configuration file
is a YAML file that contains the settings for Broker, Worker, Plugins, and
Dataframes. You can share the same config file both for the Broker and Worker.
Create a new directory for your project and add a inlineCode { conf.yaml }
file with the following content:

code {
  language = yaml,
  content = """
    system:
      log: info                           # Log level               [debug, info, warn, error] (default: info)
      name: Timeleap                      # System name

    network:
      bind: 0.0.0.0:9123                  # Broker bind address (for brokers only)  (default: 0.0.0.0:9123)
      broker:                             # Broker configuration (for workers only)
        uri: ws://localhost:9123          # Broker URI to connect to
        publicKey: <broker-public-key>    # Broker public key for authentication

    rpc:
      cpus: <cpu-units>                   # CPU units for RPC server (default: 1)
      gpus: <gpu-units>                   # GPU units for RPC server (default: 0)
      ram: <ram>                          # RAM for RPC server (default: 1024) (MB)

    pos:
      rpc:
        - <evm-rpc-uri>                   # EVM RPC URI (For both brokers and workers)
  """
}

Replace the placeholders with the actual values. For the inlineCode {
network.broker.publicKey }, option, you should run the inlineCode { unchained }
binary with the inlineCode { --allow-generate-secrets }. This will generate a
new secrets file in your project directory. You can then copy the public key from
the secrets file to the inlineCode { network.broker.publicKey } option.

Once you have created the configuration file, you can start the Broker and Worker
nodes. To start the Broker, run the following command:

code {
  language = bash,
  content = "unchained broker"
}

To start the Worker, run the following command:

code {
  language = bash,
  content = "unchained worker"
}

The Broker and Worker nodes will start and connect to each other. You can now
start testing your applications on the local devnet.

title { Sample Plugin, size = 2 }

To run the TEP-1 demo plugin on the local devnet, you need to clone the plugin
repository from GitHub. You can clone the repository using the following command:

code {
  language = bash,
  content = "git clone https://github.com/TimeleapLabs/tep-examples.git"
}

The sample plugin is located in the inlineCode { tep-1-plugins/simple } directory.
First, you need to build the plugin using the following command:

code {
  language = bash,
  content = """
    cd tep-examples/tep-1-plugins/simple/plugin
    yarn
    yarn build
  """
}

Now generate a new private key for the plugin using the following command:

code {
  language = bash,
  content = "yarn ed"
}

Then create a .env file in the plugin directory with the following content:

code {
  language = bash,
  content = """
    PLUGIN_PRIVATE_KEY="<plugin-private-key>"
    WORKER_PUBLIC_KEY=<worker-public-key>"
  """
}

Replace the placeholders with the actual values. You can get the worker public
key from the secrets file generated by the inlineCode { unchained } binary in
the previous step.

Finally, you can start the plugin using the following command:

code {
  language = bash,
  content = "yarn start"
}

Now back to the Unchained configuration file, add the plugin configuration to
the Plugins section:

code {
  language = yaml,
  content = """
    plugins:
      - name: swiss.timeleap.isWizard.v1
        endpoint: ws://localhost:3000
        type: websocket
        publicKey: <plugin-public-key>
        functions:
          - name: isWizard
            cpu: 1
            timeout: 1000
  """
}

Replace the placeholders with the actual values, and restart the Worker node.

title { RPC Client, size = 2 }

To interact with the sample plugin over the local devnet, you can use the Unchained
RPC client in the TEP examples GitHub repository. Head back to the TEP examples
repository and build the RPC client using the following command:

code {
  language = bash,
  content = """
    cd tep-examples/tep-1-plugins/simple/client
    yarn
    yarn build
  """
}

Generate a new private key for the client using the following command:

code {
  language = bash,
  content = "yarn ed"
}

Then create a .env file in the client directory with the following content:

code {
  language = bash,
  content = """
    CLIENT_PRIVATE_KEY="<client-private-key>"
    BROKER_URI="ws://localhost:9123/<broker-protocol-version>"
    BROKER_PUBLIC_KEY="<broker-public-key>"
  """
}

Replace the placeholders with the actual values. You can get the broker public
key from the secrets file generated by the inlineCode { unchained } binary in
the previous steps.

Finally, you can start the RPC client using the following command:

code {
  language = bash,
  content = "yarn start"
}

meta {
  description = "To try out the new features of Unchained, or to test your applications, you can
                 run a local development network. This network is a simulation of the real network,
                 but it runs on your local machine. This allows you to test your applications in a
                 controlled environment.",
  title = "Unchained Local Devnet",
  ogImageText = ["Unchained", "Local Devnet"],
  ogImageFontSize = 32
}
